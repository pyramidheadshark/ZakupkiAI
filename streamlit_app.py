import streamlit as st
import uuid
import logging
import socket

st.set_page_config(
    page_title="–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç –ø–æ –ì–æ—Å–∑–∞–∫—É–ø–∫–∞–º",
    page_icon="ü§ñ",
    layout="wide",
)

logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', datefmt='%Y-%m-%d %H:%M:%S')
logger = logging.getLogger(__name__)

if 'session_id' not in st.session_state:
    st.session_state['session_id'] = str(uuid.uuid4())
    st.session_state.messages = []
    st.session_state.flow_initialized = False
    st.session_state.init_error = None
    st.session_state.internet_checked = False
    st.session_state.run_agent = None
    logger.info(f"STREAMLIT: –ù–æ–≤–∞—è —Å–µ—Å—Å–∏—è Streamlit —Å–æ–∑–¥–∞–Ω–∞: {st.session_state['session_id']}")

@st.cache_data(show_spinner=False)
def check_internet_connection(host="8.8.8.8", port=53, timeout=3):
    logger.debug("STREAMLIT: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è...")
    try:
        socket.setdefaulttimeout(timeout)
        socket.socket(socket.AF_INET, socket.SOCK_STREAM).connect((host, port))
        logger.debug("STREAMLIT: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞: –£—Å–ø–µ—à–Ω–æ.")
        return True
    except socket.error as ex:
        logger.warning(f"STREAMLIT: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è ({ex}).")
        return False

@st.cache_resource(show_spinner="–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞...")
def initialize_flow_components():
    """
    –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏, –∑–∞–≥—Ä—É–∂–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥ –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç LLM.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ—Ä—Ç–µ–∂ (run_agent_func, settings_object, error_message).
    """
    logger.info("STREAMLIT: –ü–æ–ø—ã—Ç–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ (–≤–Ω—É—Ç—Ä–∏ @st.cache_resource)...")
    run_agent_local_func = None
    settings_local = None
    error_msg = None
    success = False
    try:
        from src.config import settings
        settings_local = settings
        if not settings_local:
             raise ValueError("–û–±—ä–µ–∫—Ç –Ω–∞—Å—Ç—Ä–æ–µ–∫ (settings) –Ω–µ –±—ã–ª –∑–∞–≥—Ä—É–∂–µ–Ω –∏–∑ src.config.")

        log_level_numeric = getattr(logging, settings_local.log_level.upper(), logging.INFO)
        logging.getLogger().setLevel(log_level_numeric)
        for lib_logger in ["httpx", "httpcore", "google.api_core", "google.auth", "urllib3", "langchain_community.utils.user_agent"]:
            logging.getLogger(lib_logger).setLevel(logging.WARNING)
        logger.info(f"STREAMLIT: –£—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ {settings_local.log_level}.")

        from src.agent.executor import initialize_flow, run_agent as agent_runner
        run_agent_local_func = agent_runner

        logger.debug("STREAMLIT: –í—ã–∑–æ–≤ initialize_flow()...")
        success, error_msg_init = initialize_flow()
        logger.debug(f"STREAMLIT: initialize_flow() –≤–µ—Ä–Ω—É–ª: success={success}, error='{error_msg_init}'")

        if success:
            logger.info("STREAMLIT: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ.")
            return run_agent_local_func, settings_local, None
        else:
            error_msg = error_msg_init or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–æ—Ç–æ–∫–∞."
            logger.error(f"STREAMLIT: –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {error_msg}")
            return (lambda q, sid: f"–û—à–∏–±–∫–∞: {error_msg}"), settings_local, error_msg

    except ImportError as e:
         error_msg = f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}"
         logger.critical(error_msg, exc_info=True)
         class DummySettings:
            llm_provider = "–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞"
            local_llm = type('obj', (object,), {'model_gguf_path': 'N/A'})()
            gemini_llm = type('obj', (object,), {'gemini_model_name': 'N/A'})()
            agent_verbose = "N/A"; log_level = "ERROR"
         settings_local = DummySettings()
         return (lambda q, sid: error_msg), settings_local, error_msg
    except Exception as e:
        error_msg = f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}"
        logger.critical(error_msg, exc_info=True)
        class DummySettings:
             llm_provider = "–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏"; local_llm = type(...); gemini_llm = type(...); agent_verbose = "N/A"; log_level = "ERROR"
        settings_local = DummySettings()
        return (lambda q, sid: error_msg), settings_local, error_msg


run_agent_func_from_init, settings_loaded, init_error_msg = initialize_flow_components()
has_internet = check_internet_connection()

if not init_error_msg and run_agent_func_from_init and settings_loaded:
    st.session_state.flow_initialized = True
    st.session_state.init_error = None
    st.session_state.run_agent = run_agent_func_from_init
    logger.info("STREAMLIT: –°–æ—Å—Ç–æ—è–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ - –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã.")
else:
    st.session_state.flow_initialized = False
    st.session_state.init_error = init_error_msg or st.session_state.get('init_error') or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏."
    def error_stub(query: str, session_id: str) -> str:
        error_message = st.session_state.get('init_error', "–ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã.")
        return f"–û—à–∏–±–∫–∞: {error_message}"
    st.session_state.run_agent = error_stub
    logger.error(f"STREAMLIT: –°–æ—Å—Ç–æ—è–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ - –æ—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {st.session_state.init_error}")


st.title("ü§ñ –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç –ø–æ –ì–æ—Å–∑–∞–∫—É–ø–∫–∞–º (44-–§–ó / 223-–§–ó)")

if settings_loaded:
    provider_info = f"–ü—Ä–æ–≤–∞–π–¥–µ—Ä LLM: `{settings_loaded.llm_provider}`"
    model_info = f"–ú–æ–¥–µ–ª—å: `{settings_loaded.local_llm.model_gguf_path if settings_loaded.llm_provider=='local' else settings_loaded.gemini_llm.gemini_model_name}`"
    st.caption(f"{provider_info} | {model_info}")
else:
    st.caption("–ü—Ä–æ–≤–∞–π–¥–µ—Ä LLM: –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é")

if st.session_state.init_error:
    st.error(st.session_state.init_error, icon="üö®")

if not has_internet:
    st.warning("–ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ò–Ω—Ç–µ—Ä–Ω–µ—Ç—É. –ü–æ–∏—Å–∫ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏ –±—É–¥–µ—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.", icon="üåê")


st.sidebar.title("–û–ø—Ü–∏–∏")
if st.sidebar.button("–ù–æ–≤—ã–π –¥–∏–∞–ª–æ–≥", key="new_chat"):
    logger.info(f"STREAMLIT: –°–±—Ä–æ—Å –¥–∏–∞–ª–æ–≥–∞ –¥–ª—è —Å–µ—Å—Å–∏–∏: {st.session_state['session_id']}")
    st.session_state.messages = []
    logger.info(f"STREAMLIT: –î–∏–∞–ª–æ–≥ —Å–±—Ä–æ—à–µ–Ω –¥–ª—è —Å–µ—Å—Å–∏–∏: {st.session_state['session_id']}")
    st.rerun()

st.sidebar.info(f"ID —Å–µ—Å—Å–∏–∏: {st.session_state['session_id'][:8]}...")
st.sidebar.markdown("---")
if settings_loaded:
    st.sidebar.markdown(f"**–ù–∞—Å—Ç—Ä–æ–π–∫–∏:**")
    st.sidebar.markdown(f"*   LLM: `{settings_loaded.llm_provider}`")
    st.sidebar.markdown(f"*   Agent Verbose: `{settings_loaded.agent_verbose}`")
    st.sidebar.markdown(f"*   Log Level: `{settings_loaded.log_level}`")
else:
    st.sidebar.warning("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã.")


for message in st.session_state.messages:
    with st.chat_message(message["role"]):
        st.markdown(message["content"])


prompt_disabled = not st.session_state.flow_initialized
prompt_placeholder = "–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω..." if prompt_disabled else "–ó–∞–¥–∞–π—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å..."

if prompt := st.chat_input(prompt_placeholder, disabled=prompt_disabled):

    current_run_agent_func = st.session_state.get('run_agent')

    if not st.session_state.flow_initialized or not current_run_agent_func:
        st.error("–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∑–∞–ø—Ä–æ—Å.", icon="üö´")
        logger.error("STREAMLIT: –ü–æ–ø—ã—Ç–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞, –∫–æ–≥–¥–∞ –æ–Ω –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –∏–ª–∏ —Ñ—É–Ω–∫—Ü–∏—è run_agent –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏.")
    else:
        logger.info(f"STREAMLIT: –ü–æ–ª—É—á–µ–Ω –Ω–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Å–µ—Å—Å–∏—è: {st.session_state['session_id']}): '{prompt[:100]}...'")
        st.session_state.messages.append({"role": "user", "content": prompt})
        with st.chat_message("user"):
            st.markdown(prompt)

        with st.chat_message("assistant"):
            message_placeholder = st.empty()
            message_placeholder.markdown("–î—É–º–∞—é... üß†")

            try:
                assistant_response = current_run_agent_func(prompt, session_id=st.session_state['session_id'])
                message_placeholder.markdown(assistant_response)
                st.session_state.messages.append({"role": "assistant", "content": assistant_response})
                logger.info(f"STREAMLIT: –û—Ç–≤–µ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω (—Å–µ—Å—Å–∏—è: {st.session_state['session_id']}).")
            except Exception as e:
                error_msg = f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ Streamlit –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç–≤–µ—Ç–∞: {e}"
                logger.error(error_msg, exc_info=True)
                message_placeholder.error(error_msg, icon="üö®")
                st.session_state.messages.append({"role": "assistant", "content": f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {error_msg}"})


elif prompt_disabled and st.session_state.init_error:
     pass
elif prompt_disabled:
     st.warning("–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, —Ö–æ—Ç—è —è–≤–Ω—ã—Ö –æ—à–∏–±–æ–∫ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –Ω–µ –±—ã–ª–æ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏.", icon="‚ö†Ô∏è")